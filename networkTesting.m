% This file tests the network trained by networkTraining.m over many
% independent trials using testing sequence generated by
% generateMGTestData.m. Each trial will compute normalized root mean
% squared error (NRMSE) for 84 time steps.

%% Data preparation
% Testing data extraction
sampleOut = testSeq';

% Data splitting
% First 2000-step subsequence to make computed model be ready for testing
initialRunlength = 2000;

%% Matrices initialization
totalstate =  zeros(totalDim,1);    
internalState = totalstate(1:internalLength);

%% Priming model
for i = 1:initialRunlength 
    % Teacher extraction
    teach = sampleOut(1,i);         

    % Input update
    in = 0.02;
    totalstate(internalLength+1:internalLength+inputLength) = in; 
    
    % Internal state update
    internalState = tanh([intWM, inWM, ofbWM]*totalstate); 
    
    % Output update
    netOut = tanh(outWM *[internalState;in]);
    totalstate = [internalState;in;netOut];   
    
    % Forcing teacher output
    totalstate(internalLength+inputLength+1:internalLength+inputLength+outputLength) = teach' ; 
end
startstate = totalstate;

%% Start testing
testRunlength = 84;
numberOfTrials = 100;
outputCollectMat = zeros(testRunlength, numberOfTrials);
teacherCollectMat = zeros(testRunlength, numberOfTrials);
trialshift = 84;

fprintf('Starting testing...\n');
for trials = 1:numberOfTrials
    % Continue forced simulation run for trialshift steps
    totalstate = startstate;
    for i = 1:trialshift 
        % Teacher extraction
        teach = [sampleOut(1,initialRunlength + i + (trials - 1)*trialshift)];         
    
        % Input update
        in = 0.02;     
        totalstate(internalLength+1:internalLength+inputLength) = in;
        
        % Internal update
        internalState = tanh([intWM, inWM, ofbWM]*totalstate); 
        
        % Output update
        netOut = tanh(outWM *[internalState;in]);
        totalstate = [internalState;in;netOut]; 
        
        % Forcing teacher output
        totalstate(internalLength+inputLength+1:internalLength+inputLength+outputLength) = teach' ; 
    end
    startstate = totalstate;
    
    for i = 1:testRunlength   
        % Teacher extraction
        teach = [sampleOut(1,initialRunlength + i + (trials - 1)*trialshift + trialshift)];         

        % Input update
        in = 0.02;     
        totalstate(internalLength+1:internalLength+inputLength) = in;
        
        % Internal update
        internalState = tanh([intWM, inWM, ofbWM]*totalstate); 
        
        % Output update
        netOut = tanh(outWM *[internalState;in]);
        totalstate = [internalState;in;netOut];
        
        % Data collection for computing NRMSE
        outputCollectMat(i, trials) = netOut;
        teacherCollectMat(i, trials) = teach;
    end
end
fprintf('Testing completed!\n');

%% Compute the NRMSE for 84 step prediction
% Compute variance of original MG series
teachVar = var(atanh(sampleOut));

% Recover MG data by undo tanh transformation
outputCollectMatMG = atanh(outputCollectMat);
teacherCollectMatMG = atanh(teacherCollectMat);

% Compute average NMSE of 84 step predictions over numberOfTrials trials
errors84 = outputCollectMatMG(84,:) - teacherCollectMatMG(84,:);
NRMSE84 = sqrt(mean(errors84.^2)/teachVar);

%% Result visualization
fprintf('Testing result:\n');
fprintf('NRMSE84 = %f\n', NRMSE84);
